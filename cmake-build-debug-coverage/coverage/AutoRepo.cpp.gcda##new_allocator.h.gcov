        -:    0:Source:C:/Program Files/JetBrains/CLion 2023.3.4/bin/mingw/lib/gcc/x86_64-w64-mingw32/13.1.0/include/c++/bits/new_allocator.h
        -:    0:Graph:C:\Users\rares\CLionProjects\OOP\Json-test\cmake-build-debug-coverage\CMakeFiles\Json_test.dir\Repositories\AutoRepo\AutoRepo.cpp.gcno
        -:    0:Data:C:\Users\rares\CLionProjects\OOP\Json-test\cmake-build-debug-coverage\CMakeFiles\Json_test.dir\Repositories\AutoRepo\AutoRepo.cpp.gcda
        -:    0:Runs:1
        -:    1:// Allocator that wraps operator new -*- C++ -*-
        -:    2:
        -:    3:// Copyright (C) 2001-2023 Free Software Foundation, Inc.
        -:    4://
        -:    5:// This file is part of the GNU ISO C++ Library.  This library is free
        -:    6:// software; you can redistribute it and/or modify it under the
        -:    7:// terms of the GNU General Public License as published by the
        -:    8:// Free Software Foundation; either version 3, or (at your option)
        -:    9:// any later version.
        -:   10:
        -:   11:// This library is distributed in the hope that it will be useful,
        -:   12:// but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   13:// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   14:// GNU General Public License for more details.
        -:   15:
        -:   16:// Under Section 7 of GPL version 3, you are granted additional
        -:   17:// permissions described in the GCC Runtime Library Exception, version
        -:   18:// 3.1, as published by the Free Software Foundation.
        -:   19:
        -:   20:// You should have received a copy of the GNU General Public License and
        -:   21:// a copy of the GCC Runtime Library Exception along with this program;
        -:   22:// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
        -:   23:// <http://www.gnu.org/licenses/>.
        -:   24:
        -:   25:/** @file bits/new_allocator.h
        -:   26: *  This is an internal header file, included by other library headers.
        -:   27: *  Do not attempt to use it directly. @headername{memory}
        -:   28: */
        -:   29:
        -:   30:#ifndef _STD_NEW_ALLOCATOR_H
        -:   31:#define _STD_NEW_ALLOCATOR_H 1
        -:   32:
        -:   33:#include <bits/c++config.h>
        -:   34:#include <new>
        -:   35:#include <bits/functexcept.h>
        -:   36:#include <bits/move.h>
        -:   37:#if __cplusplus >= 201103L
        -:   38:#include <type_traits>
        -:   39:#endif
        -:   40:
        -:   41:namespace std _GLIBCXX_VISIBILITY(default)
        -:   42:{
        -:   43:_GLIBCXX_BEGIN_NAMESPACE_VERSION
        -:   44:
        -:   45:  /**
        -:   46:   * @brief  An allocator that uses global `new`, as per C++03 [20.4.1].
        -:   47:   * @ingroup allocators
        -:   48:   *
        -:   49:   * This is precisely the allocator defined in the C++ Standard.
        -:   50:   *   - all allocation calls `operator new`
        -:   51:   *   - all deallocation calls `operator delete`
        -:   52:   *
        -:   53:   * This is the default base-class implementation of `std::allocator`,
        -:   54:   * and is also the base-class of the `__gnu_cxx::new_allocator` extension.
        -:   55:   * You should use either `std::allocator` or `__gnu_cxx::new_allocator`
        -:   56:   * instead of using this directly.
        -:   57:   *
        -:   58:   * @tparam  _Tp  Type of allocated object.
        -:   59:   *
        -:   60:   * @headerfile memory
        -:   61:   */
        -:   62:  template<typename _Tp>
        -:   63:    class __new_allocator
        -:   64:    {
        -:   65:    public:
        -:   66:      typedef _Tp        value_type;
        -:   67:      typedef std::size_t     size_type;
        -:   68:      typedef std::ptrdiff_t  difference_type;
        -:   69:#if __cplusplus <= 201703L
        -:   70:      typedef _Tp*       pointer;
        -:   71:      typedef const _Tp* const_pointer;
        -:   72:      typedef _Tp&       reference;
        -:   73:      typedef const _Tp& const_reference;
        -:   74:
        -:   75:      template<typename _Tp1>
        -:   76:	struct rebind
        -:   77:	{ typedef __new_allocator<_Tp1> other; };
        -:   78:#endif
        -:   79:
        -:   80:#if __cplusplus >= 201103L
        -:   81:      // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:   82:      // 2103. propagate_on_container_move_assignment
        -:   83:      typedef std::true_type propagate_on_container_move_assignment;
        -:   84:#endif
        -:   85:
        -:   86:      __attribute__((__always_inline__))
        -:   87:      _GLIBCXX20_CONSTEXPR
    1064*:   88:      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
       29:   88-block  0
    %%%%%:   88-block  1
       56:   88-block  2
       23:   88-block  3
        8:   88-block  4
        8:   88-block  5
       17:   88-block  6
    %%%%%:   88-block  7
    %%%%%:   88-block  8
    %%%%%:   88-block  9
        6:   88-block 10
    %%%%%:   88-block 11
    %%%%%:   88-block 12
    %%%%%:   88-block 13
    %%%%%:   88-block 14
        6:   88-block 15
        6:   88-block 16
    %%%%%:   88-block 17
      478:   88-block 18
        7:   88-block 19
       42:   88-block 20
    %%%%%:   88-block 21
    %%%%%:   88-block 22
    %%%%%:   88-block 23
    %%%%%:   88-block 24
    %%%%%:   88-block 25
    %%%%%:   88-block 26
    %%%%%:   88-block 27
    %%%%%:   88-block 28
    %%%%%:   88-block 29
    %%%%%:   88-block 30
    %%%%%:   88-block 31
    %%%%%:   88-block 32
    %%%%%:   88-block 33
    %%%%%:   88-block 34
    %%%%%:   88-block 35
    %%%%%:   88-block 36
    %%%%%:   88-block 37
    %%%%%:   88-block 38
    %%%%%:   88-block 39
    %%%%%:   88-block 40
    %%%%%:   88-block 41
    %%%%%:   88-block 42
    %%%%%:   88-block 43
    %%%%%:   88-block 44
    %%%%%:   88-block 45
       11:   88-block 46
    %%%%%:   88-block 47
    %%%%%:   88-block 48
    %%%%%:   88-block 49
    %%%%%:   88-block 50
    %%%%%:   88-block 51
    %%%%%:   88-block 52
    %%%%%:   88-block 53
    %%%%%:   88-block 54
    %%%%%:   88-block 55
       17:   88-block 56
    %%%%%:   88-block 57
    %%%%%:   88-block 58
    %%%%%:   88-block 59
       89:   88-block 60
    %%%%%:   88-block 61
    %%%%%:   88-block 62
    %%%%%:   88-block 63
    %%%%%:   88-block 64
       40:   88-block 65
      192:   88-block 66
        6:   88-block 67
    %%%%%:   88-block 68
    %%%%%:   88-block 69
        -:   89:
        -:   90:      __attribute__((__always_inline__))
        -:   91:      _GLIBCXX20_CONSTEXPR
     101*:   92:      __new_allocator(const __new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
    %%%%%:   92-block  0
        7:   92-block  1
       42:   92-block  2
       42:   92-block  3
        3:   92-block  4
        -:   93:
        -:   94:      template<typename _Tp1>
        -:   95:	__attribute__((__always_inline__))
        -:   96:	_GLIBCXX20_CONSTEXPR
        -:   97:	__new_allocator(const __new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }
        -:   98:
        -:   99:#if __cplusplus <= 201703L
      58*:  100:      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN8nlohmann16json_abi_v3_11_36detail21output_string_adapterIcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEESaIvELN9__gnu_cxx12_Lock_policyE2EEED2Ev:
function _ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN8nlohmann16json_abi_v3_11_36detail21output_string_adapterIcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEESaIvELN9__gnu_cxx12_Lock_policyE2EEED2Ev called 46 returned 100% blocks executed 100%
       46:  100:      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZNSt15__new_allocatorIhED2Ev:
function _ZNSt15__new_allocatorIhED2Ev called 0 returned 0% blocks executed 0%
    #####:  100:      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEN8nlohmann16json_abi_v3_11_310basic_jsonISt3mapSt6vectorS7_bxydSaNSA_14adl_serializerESD_IhSaIhEEvEEEEED2Ev:
function _ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEN8nlohmann16json_abi_v3_11_310basic_jsonISt3mapSt6vectorS7_bxydSaNSA_14adl_serializerESD_IhSaIhEEvEEEEED2Ev called 0 returned 0% blocks executed 0%
    #####:  100:      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZNSt15__new_allocatorISt6vectorIN8nlohmann16json_abi_v3_11_310basic_jsonISt3mapS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbxydSaNS2_14adl_serializerES0_IhSaIhEEvEESaISE_EEED2Ev:
function _ZNSt15__new_allocatorISt6vectorIN8nlohmann16json_abi_v3_11_310basic_jsonISt3mapS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbxydSaNS2_14adl_serializerES0_IhSaIhEEvEESaISE_EEED2Ev called 0 returned 0% blocks executed 0%
    #####:  100:      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZNSt15__new_allocatorIN8nlohmann16json_abi_v3_11_310basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbxydSaNS1_14adl_serializerES4_IhSaIhEEvEEED2Ev:
function _ZNSt15__new_allocatorIN8nlohmann16json_abi_v3_11_310basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbxydSaNS1_14adl_serializerES4_IhSaIhEEvEEED2Ev called 0 returned 0% blocks executed 0%
    #####:  100:      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZNSt15__new_allocatorImED2Ev:
function _ZNSt15__new_allocatorImED2Ev called 6 returned 100% blocks executed 100%
        6:  100:      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZNSt15__new_allocatorIPN8nlohmann16json_abi_v3_11_310basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbxydSaNS1_14adl_serializerES4_IhSaIhEEvEEED2Ev:
function _ZNSt15__new_allocatorIPN8nlohmann16json_abi_v3_11_310basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbxydSaNS1_14adl_serializerES4_IhSaIhEEvEEED2Ev called 6 returned 100% blocks executed 100%
        6:  100:      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZNSt15__new_allocatorISt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEN8nlohmann16json_abi_v3_11_310basic_jsonIS0_St6vectorS6_bxydSaNS8_14adl_serializerESA_IhSaIhEEvEESt4lessIvESaISt4pairIKS6_SE_EEEED2Ev:
function _ZNSt15__new_allocatorISt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEN8nlohmann16json_abi_v3_11_310basic_jsonIS0_St6vectorS6_bxydSaNS8_14adl_serializerESA_IhSaIhEEvEESt4lessIvESaISt4pairIKS6_SE_EEEED2Ev called 0 returned 0% blocks executed 0%
    #####:  100:      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZNSt15__new_allocatorIN8nlohmann16json_abi_v3_11_327byte_container_with_subtypeISt6vectorIhSaIhEEEEED2Ev:
function _ZNSt15__new_allocatorIN8nlohmann16json_abi_v3_11_327byte_container_with_subtypeISt6vectorIhSaIhEEEEED2Ev called 0 returned 0% blocks executed 0%
    #####:  100:      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED2Ev:
function _ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED2Ev called 0 returned 0% blocks executed 0%
    #####:  100:      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZNSt15__new_allocatorIcED2Ev:
function _ZNSt15__new_allocatorIcED2Ev called 0 returned 0% blocks executed 0%
    #####:  100:      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
        -:  101:
        -:  102:      pointer
        -:  103:      address(reference __x) const _GLIBCXX_NOEXCEPT
        -:  104:      { return std::__addressof(__x); }
        -:  105:
        -:  106:      const_pointer
        -:  107:      address(const_reference __x) const _GLIBCXX_NOEXCEPT
        -:  108:      { return std::__addressof(__x); }
        -:  109:#endif
        -:  110:
        -:  111:#if __has_builtin(__builtin_operator_new) >= 201802L
        -:  112:# define _GLIBCXX_OPERATOR_NEW __builtin_operator_new
        -:  113:# define _GLIBCXX_OPERATOR_DELETE __builtin_operator_delete
        -:  114:#else
        -:  115:# define _GLIBCXX_OPERATOR_NEW ::operator new
        -:  116:# define _GLIBCXX_OPERATOR_DELETE ::operator delete
        -:  117:#endif
        -:  118:
        -:  119:      // NB: __n is permitted to be 0.  The C++ standard says nothing
        -:  120:      // about what the return value is when __n == 0.
        -:  121:      _GLIBCXX_NODISCARD _Tp*
    1378*:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
    1378*:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    #####:  135:	      std::__throw_bad_array_new_length();
    #####:  136:	    std::__throw_bad_alloc();
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
    1378*:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
        -:  148:      }
------------------
_ZNSt15__new_allocatorIhE8allocateEyPKv:
function _ZNSt15__new_allocatorIhE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
    #####:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  130-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
        -:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
        -:  135:	      std::__throw_bad_array_new_length();
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
    #####:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    %%%%%:  147-block  0
call    0 never executed
        -:  148:      }
------------------
_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN8nlohmann16json_abi_v3_11_36detail21output_string_adapterIcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEESaIvELN9__gnu_cxx12_Lock_policyE2EEE8allocateEyPKv:
function _ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN8nlohmann16json_abi_v3_11_36detail21output_string_adapterIcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEESaIvELN9__gnu_cxx12_Lock_policyE2EEE8allocateEyPKv called 23 returned 100% blocks executed 67%
       23:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
       23:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
       23:  130-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 23
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
       23:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
       23:  147-block  0
call    0 returned 23
        -:  148:      }
------------------
_ZNSt15__new_allocatorIPN8nlohmann16json_abi_v3_11_310basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbxydSaNS1_14adl_serializerES4_IhSaIhEEvEEE8allocateEyPKv:
function _ZNSt15__new_allocatorIPN8nlohmann16json_abi_v3_11_310basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbxydSaNS1_14adl_serializerES4_IhSaIhEEvEEE8allocateEyPKv called 7 returned 100% blocks executed 67%
        7:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
        7:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
        7:  130-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 7
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
        7:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
        7:  147-block  0
call    0 returned 7
        -:  148:      }
------------------
_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEN8nlohmann16json_abi_v3_11_310basic_jsonISt3mapSt6vectorS7_bxydSaNSA_14adl_serializerESD_IhSaIhEEvEEEEE8allocateEyPKv:
function _ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEN8nlohmann16json_abi_v3_11_310basic_jsonISt3mapSt6vectorS7_bxydSaNSA_14adl_serializerESD_IhSaIhEEvEEEEE8allocateEyPKv called 675 returned 100% blocks executed 67%
      675:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
      675:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
      675:  130-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 675
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
      675:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
      675:  147-block  0
call    0 returned 675
        -:  148:      }
------------------
_ZNSt15__new_allocatorImE8allocateEyPKv:
function _ZNSt15__new_allocatorImE8allocateEyPKv called 1 returned 100% blocks executed 67%
        1:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
        1:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
        1:  130-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
        1:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
        1:  147-block  0
call    0 returned 1
        -:  148:      }
------------------
_ZNSt15__new_allocatorIN8nlohmann16json_abi_v3_11_310basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbxydSaNS1_14adl_serializerES4_IhSaIhEEvEEE8allocateEyPKv:
function _ZNSt15__new_allocatorIN8nlohmann16json_abi_v3_11_310basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbxydSaNS1_14adl_serializerES4_IhSaIhEEvEEE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
    #####:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  130-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
    #####:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    %%%%%:  147-block  0
call    0 never executed
        -:  148:      }
------------------
_ZNSt15__new_allocatorIN8nlohmann16json_abi_v3_11_327byte_container_with_subtypeISt6vectorIhSaIhEEEEE8allocateEyPKv:
function _ZNSt15__new_allocatorIN8nlohmann16json_abi_v3_11_327byte_container_with_subtypeISt6vectorIhSaIhEEEEE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
    #####:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  130-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
    #####:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    %%%%%:  147-block  0
call    0 never executed
        -:  148:      }
------------------
_ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEyPKv:
function _ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEyPKv called 579 returned 100% blocks executed 67%
      579:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
      579:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
      579:  130-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 579
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
      579:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
      579:  147-block  0
call    0 returned 579
        -:  148:      }
------------------
_ZNSt15__new_allocatorISt6vectorIN8nlohmann16json_abi_v3_11_310basic_jsonISt3mapS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbxydSaNS2_14adl_serializerES0_IhSaIhEEvEESaISE_EEE8allocateEyPKv:
function _ZNSt15__new_allocatorISt6vectorIN8nlohmann16json_abi_v3_11_310basic_jsonISt3mapS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbxydSaNS2_14adl_serializerES0_IhSaIhEEvEESaISE_EEE8allocateEyPKv called 18 returned 100% blocks executed 67%
       18:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
       18:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
       18:  130-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 18
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
       18:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
       18:  147-block  0
call    0 returned 18
        -:  148:      }
------------------
_ZNSt15__new_allocatorISt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEN8nlohmann16json_abi_v3_11_310basic_jsonIS0_St6vectorS6_bxydSaNS8_14adl_serializerESA_IhSaIhEEvEESt4lessIvESaISt4pairIKS6_SE_EEEE8allocateEyPKv:
function _ZNSt15__new_allocatorISt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEN8nlohmann16json_abi_v3_11_310basic_jsonIS0_St6vectorS6_bxydSaNS8_14adl_serializerESA_IhSaIhEEvEESt4lessIvESaISt4pairIKS6_SE_EEEE8allocateEyPKv called 59 returned 100% blocks executed 67%
       59:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
       59:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
       59:  130-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 59
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
       59:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
       59:  147-block  0
call    0 returned 59
        -:  148:      }
------------------
_ZNSt15__new_allocatorIcE8allocateEyPKv:
function _ZNSt15__new_allocatorIcE8allocateEyPKv called 16 returned 100% blocks executed 86%
       16:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
       16:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
       16:  130-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 16
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
        -:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
        -:  135:	      std::__throw_bad_array_new_length();
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
       16:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
       16:  147-block  0
call    0 returned 16
        -:  148:      }
------------------
        -:  149:
        -:  150:      // __p is not permitted to be a null pointer.
        -:  151:      void
      47*:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
      47*:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
        -:  169:      }
------------------
_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN8nlohmann16json_abi_v3_11_36detail21output_string_adapterIcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEESaIvELN9__gnu_cxx12_Lock_policyE2EEE10deallocateEPSF_y:
function _ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceIN8nlohmann16json_abi_v3_11_36detail21output_string_adapterIcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEESaIvELN9__gnu_cxx12_Lock_policyE2EEE10deallocateEPSF_y called 23 returned 100% blocks executed 100%
       23:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
       23:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
       23:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
       23:  168-block  0
call    0 returned 23
        -:  169:      }
------------------
_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEN8nlohmann16json_abi_v3_11_310basic_jsonISt3mapSt6vectorS7_bxydSaNSA_14adl_serializerESD_IhSaIhEEvEEEEE10deallocateEPSJ_y:
function _ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEN8nlohmann16json_abi_v3_11_310basic_jsonISt3mapSt6vectorS7_bxydSaNSA_14adl_serializerESD_IhSaIhEEvEEEEE10deallocateEPSJ_y called 0 returned 0% blocks executed 0%
    #####:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    %%%%%:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
    #####:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    %%%%%:  168-block  0
call    0 never executed
        -:  169:      }
------------------
_ZNSt15__new_allocatorIhE10deallocateEPhy:
function _ZNSt15__new_allocatorIhE10deallocateEPhy called 0 returned 0% blocks executed 0%
    #####:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    %%%%%:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
    #####:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    %%%%%:  168-block  0
call    0 never executed
        -:  169:      }
------------------
_ZNSt15__new_allocatorImE10deallocateEPmy:
function _ZNSt15__new_allocatorImE10deallocateEPmy called 1 returned 100% blocks executed 100%
        1:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
        1:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
        1:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
        1:  168-block  0
call    0 returned 1
        -:  169:      }
------------------
_ZNSt15__new_allocatorIPN8nlohmann16json_abi_v3_11_310basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbxydSaNS1_14adl_serializerES4_IhSaIhEEvEEE10deallocateEPSF_y:
function _ZNSt15__new_allocatorIPN8nlohmann16json_abi_v3_11_310basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbxydSaNS1_14adl_serializerES4_IhSaIhEEvEEE10deallocateEPSF_y called 7 returned 100% blocks executed 100%
        7:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
        7:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
        7:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
        7:  168-block  0
call    0 returned 7
        -:  169:      }
------------------
_ZNSt15__new_allocatorIN8nlohmann16json_abi_v3_11_310basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbxydSaNS1_14adl_serializerES4_IhSaIhEEvEEE10deallocateEPSE_y:
function _ZNSt15__new_allocatorIN8nlohmann16json_abi_v3_11_310basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbxydSaNS1_14adl_serializerES4_IhSaIhEEvEEE10deallocateEPSE_y called 0 returned 0% blocks executed 0%
    #####:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    %%%%%:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
    #####:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    %%%%%:  168-block  0
call    0 never executed
        -:  169:      }
------------------
_ZNSt15__new_allocatorISt6vectorIN8nlohmann16json_abi_v3_11_310basic_jsonISt3mapS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbxydSaNS2_14adl_serializerES0_IhSaIhEEvEESaISE_EEE10deallocateEPSG_y:
function _ZNSt15__new_allocatorISt6vectorIN8nlohmann16json_abi_v3_11_310basic_jsonISt3mapS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbxydSaNS2_14adl_serializerES0_IhSaIhEEvEESaISE_EEE10deallocateEPSG_y called 0 returned 0% blocks executed 0%
    #####:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    %%%%%:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
    #####:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    %%%%%:  168-block  0
call    0 never executed
        -:  169:      }
------------------
_ZNSt15__new_allocatorIcE10deallocateEPcy:
function _ZNSt15__new_allocatorIcE10deallocateEPcy called 16 returned 100% blocks executed 100%
       16:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
       16:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
       16:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
       16:  168-block  0
call    0 returned 16
        -:  169:      }
------------------
_ZNSt15__new_allocatorISt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEN8nlohmann16json_abi_v3_11_310basic_jsonIS0_St6vectorS6_bxydSaNS8_14adl_serializerESA_IhSaIhEEvEESt4lessIvESaISt4pairIKS6_SE_EEEE10deallocateEPSL_y:
function _ZNSt15__new_allocatorISt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEN8nlohmann16json_abi_v3_11_310basic_jsonIS0_St6vectorS6_bxydSaNS8_14adl_serializerESA_IhSaIhEEvEESt4lessIvESaISt4pairIKS6_SE_EEEE10deallocateEPSL_y called 0 returned 0% blocks executed 0%
    #####:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    %%%%%:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
    #####:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    %%%%%:  168-block  0
call    0 never executed
        -:  169:      }
------------------
_ZNSt15__new_allocatorIN8nlohmann16json_abi_v3_11_327byte_container_with_subtypeISt6vectorIhSaIhEEEEE10deallocateEPS6_y:
function _ZNSt15__new_allocatorIN8nlohmann16json_abi_v3_11_327byte_container_with_subtypeISt6vectorIhSaIhEEEEE10deallocateEPS6_y called 0 returned 0% blocks executed 0%
    #####:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    %%%%%:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
    #####:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    %%%%%:  168-block  0
call    0 never executed
        -:  169:      }
------------------
_ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10deallocateEPS5_y:
function _ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10deallocateEPS5_y called 0 returned 0% blocks executed 0%
    #####:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    %%%%%:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
    #####:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    %%%%%:  168-block  0
call    0 never executed
        -:  169:      }
------------------
        -:  170:
        -:  171:#undef _GLIBCXX_SIZED_DEALLOC
        -:  172:#undef _GLIBCXX_OPERATOR_DELETE
        -:  173:#undef _GLIBCXX_OPERATOR_NEW
        -:  174:
        -:  175:#if __cplusplus <= 201703L
        -:  176:      __attribute__((__always_inline__))
        -:  177:      size_type
        -:  178:      max_size() const _GLIBCXX_USE_NOEXCEPT
      48*:  179:      { return _M_max_size(); }
       32:  179-block  0
       32:  179-block  1
       14:  179-block  2
       14:  179-block  3
    %%%%%:  179-block  4
    %%%%%:  179-block  5
        2:  179-block  6
        2:  179-block  7
    %%%%%:  179-block  8
    %%%%%:  179-block  9
        -:  180:
        -:  181:#if __cplusplus >= 201103L
        -:  182:      template<typename _Up, typename... _Args>
        -:  183:	__attribute__((__always_inline__))
        -:  184:	void
        -:  185:	construct(_Up* __p, _Args&&... __args)
        -:  186:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    3790*:  187:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
call    0 returned 504
call    1 returned 504
call    2 returned 504
branch  3 taken 504 (fallthrough)
branch  4 taken 0 (throw)
      504:  187-block  0
    $$$$$:  187-block  1
branch  5 never executed (fallthrough)
branch  6 never executed
    $$$$$:  187-block  2
call    7 never executed
call    8 returned 16
call    9 returned 16
call   10 returned 72
call   11 returned 72
call   12 returned 72
call   13 returned 72
call   14 returned 72
call   15 returned 72
branch 16 taken 72 (fallthrough)
branch 17 taken 0 (throw)
       72:  187-block  3
    $$$$$:  187-block  4
    $$$$$:  187-block  5
branch 18 never executed (fallthrough)
branch 19 never executed
    $$$$$:  187-block  6
call   20 never executed
call   21 returned 2366
call   22 returned 2366
call   23 returned 29
       29:  187-block  7
call   24 returned 29
call   25 returned 29
branch 26 taken 29 (fallthrough)
branch 27 taken 0 (throw)
       29:  187-block  8
call   28 returned 29
    $$$$$:  187-block  9
    $$$$$:  187-block 10
branch 29 never executed (fallthrough)
branch 30 never executed
    $$$$$:  187-block 11
call   31 never executed
call   32 never executed
call   33 never executed
call   34 never executed
call   35 returned 56
call   36 returned 56
call   37 returned 56
call   38 never executed
call   39 never executed
call   40 never executed
call   41 never executed
call   42 never executed
call   43 never executed
branch 44 never executed (fallthrough)
branch 45 never executed (throw)
    %%%%%:  187-block 12
    $$$$$:  187-block 13
branch 46 never executed (fallthrough)
branch 47 never executed
    $$$$$:  187-block 14
call   48 never executed
call   49 never executed
call   50 never executed
call   51 never executed
call   52 never executed
call   53 never executed
call   54 never executed
call   55 never executed
call   56 never executed
call   57 never executed
call   58 never executed
call   59 never executed
call   60 never executed
call   61 returned 7
call   62 returned 7
call   63 returned 4
call   64 returned 4
call   65 returned 4
branch 66 taken 4 (fallthrough)
branch 67 taken 0 (throw)
        4:  187-block 15
    $$$$$:  187-block 16
branch 68 never executed (fallthrough)
branch 69 never executed
    $$$$$:  187-block 17
call   70 never executed
call   71 returned 99
call   72 returned 99
call   73 returned 99
call   74 returned 99
call   75 returned 8
        8:  187-block 18
call   76 returned 8
call   77 returned 8
branch 78 taken 8 (fallthrough)
branch 79 taken 0 (throw)
        8:  187-block 19
call   80 returned 8
    $$$$$:  187-block 20
    $$$$$:  187-block 21
branch 81 never executed (fallthrough)
branch 82 never executed
    $$$$$:  187-block 22
call   83 never executed
call   84 returned 8
        8:  187-block 23
call   85 returned 8
call   86 returned 8
branch 87 taken 8 (fallthrough)
branch 88 taken 0 (throw)
        8:  187-block 24
call   89 returned 8
    $$$$$:  187-block 25
    $$$$$:  187-block 26
branch 90 never executed (fallthrough)
branch 91 never executed
    $$$$$:  187-block 27
call   92 never executed
call   93 never executed
call   94 never executed
call   95 never executed
call   96 never executed
call   97 never executed
call   98 never executed
call   99 never executed
call   100 never executed
call   101 never executed
branch 102 never executed (fallthrough)
branch 103 never executed (throw)
    %%%%%:  187-block 28
    $$$$$:  187-block 29
branch 104 never executed (fallthrough)
branch 105 never executed
    $$$$$:  187-block 30
call   106 never executed
call   107 never executed
call   108 never executed
call   109 never executed
call   110 never executed
call   111 never executed
call   112 never executed
call   113 never executed
call   114 never executed
call   115 never executed
call   116 never executed
call   117 never executed
call   118 never executed
call   119 returned 5
call   120 returned 5
call   121 returned 2
call   122 returned 2
call   123 returned 2
branch 124 taken 2 (fallthrough)
branch 125 taken 0 (throw)
        2:  187-block 31
    $$$$$:  187-block 32
branch 126 never executed (fallthrough)
branch 127 never executed
    $$$$$:  187-block 33
call   128 never executed
call   129 never executed
call   130 never executed
call   131 never executed
call   132 never executed
call   133 never executed
call   134 never executed
call   135 never executed
call   136 never executed
call   137 never executed
call   138 never executed
branch 139 never executed (fallthrough)
branch 140 never executed (throw)
    %%%%%:  187-block 34
    $$$$$:  187-block 35
branch 141 never executed (fallthrough)
branch 142 never executed
    $$$$$:  187-block 36
call   143 never executed
call   144 returned 478
call   145 returned 478
call   146 returned 478
branch 147 taken 478 (fallthrough)
branch 148 taken 0 (throw)
      478:  187-block 37
    $$$$$:  187-block 38
branch 149 never executed (fallthrough)
branch 150 never executed
    $$$$$:  187-block 39
call   151 never executed
call   152 returned 7
call   153 returned 7
call   154 returned 7
branch 155 taken 7 (fallthrough)
branch 156 taken 0 (throw)
        7:  187-block 40
    $$$$$:  187-block 41
branch 157 never executed (fallthrough)
branch 158 never executed
    $$$$$:  187-block 42
call   159 never executed
call   160 returned 42
call   161 returned 42
call   162 returned 42
branch 163 taken 42 (fallthrough)
branch 164 taken 0 (throw)
       42:  187-block 43
    $$$$$:  187-block 44
branch 165 never executed (fallthrough)
branch 166 never executed
    $$$$$:  187-block 45
call   167 never executed
call   168 returned 11
call   169 returned 11
call   170 returned 11
branch 171 taken 11 (fallthrough)
branch 172 taken 0 (throw)
       11:  187-block 46
    $$$$$:  187-block 47
branch 173 never executed (fallthrough)
branch 174 never executed
    $$$$$:  187-block 48
call   175 never executed
call   176 never executed
call   177 never executed
call   178 never executed
    %%%%%:  187-block 49
call   179 never executed
call   180 never executed
branch 181 never executed (fallthrough)
branch 182 never executed (throw)
    %%%%%:  187-block 50
call   183 never executed
    $$$$$:  187-block 51
    $$$$$:  187-block 52
branch 184 never executed (fallthrough)
branch 185 never executed
    $$$$$:  187-block 53
call   186 never executed
call   187 returned 11
call   188 returned 11
call   189 returned 17
call   190 returned 17
call   191 returned 3
call   192 returned 3
call   193 returned 3
branch 194 taken 3 (fallthrough)
branch 195 taken 0 (throw)
        3:  187-block 54
    $$$$$:  187-block 55
branch 196 never executed (fallthrough)
branch 197 never executed
    $$$$$:  187-block 56
call   198 never executed
        -:  188:
        -:  189:      template<typename _Up>
        -:  190:	__attribute__((__always_inline__))
        -:  191:	void
        -:  192:	destroy(_Up* __p)
        -:  193:	noexcept(std::is_nothrow_destructible<_Up>::value)
      36*:  194:	{ __p->~_Up(); }
call    0 never executed
    $$$$$:  194-block  0
call    1 never executed
    $$$$$:  194-block  1
call    2 never executed
       24:  194-block  2
    %%%%%:  194-block  3
call    3 never executed
call    4 never executed
    %%%%%:  194-block  4
call    5 never executed
    %%%%%:  194-block  5
call    6 never executed
       12:  194-block  6
    %%%%%:  194-block  7
call    7 never executed
    $$$$$:  194-block  8
call    8 never executed
    %%%%%:  194-block  9
call    9 never executed
    %%%%%:  194-block 10
call   10 never executed
    %%%%%:  194-block 11
call   11 never executed
    %%%%%:  194-block 12
call   12 never executed
    %%%%%:  194-block 13
call   13 never executed
    %%%%%:  194-block 14
call   14 never executed
        -:  195:#else
        -:  196:      // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  197:      // 402. wrong new expression in [some_] allocator::construct
        -:  198:      __attribute__((__always_inline__))
        -:  199:      void
        -:  200:      construct(pointer __p, const _Tp& __val)
        -:  201:      { ::new((void *)__p) _Tp(__val); }
        -:  202:
        -:  203:      __attribute__((__always_inline__))
        -:  204:      void
        -:  205:      destroy(pointer __p) { __p->~_Tp(); }
        -:  206:#endif
        -:  207:#endif // ! C++20
        -:  208:
        -:  209:      template<typename _Up>
        -:  210:	friend __attribute__((__always_inline__)) _GLIBCXX20_CONSTEXPR bool
        -:  211:	operator==(const __new_allocator&, const __new_allocator<_Up>&)
        -:  212:	_GLIBCXX_NOTHROW
        -:  213:	{ return true; }
        -:  214:
        -:  215:#if __cpp_impl_three_way_comparison < 201907L
        -:  216:      template<typename _Up>
        -:  217:	friend __attribute__((__always_inline__)) _GLIBCXX20_CONSTEXPR bool
        -:  218:	operator!=(const __new_allocator&, const __new_allocator<_Up>&)
        -:  219:	_GLIBCXX_NOTHROW
        -:  220:	{ return false; }
        -:  221:#endif
        -:  222:
        -:  223:    private:
        -:  224:      __attribute__((__always_inline__))
        -:  225:      _GLIBCXX_CONSTEXPR size_type
        -:  226:      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
        -:  227:      {
        -:  228:#if __PTRDIFF_MAX__ < __SIZE_MAX__
    1426*:  229:	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
       32:  229-block  0
    %%%%%:  229-block  1
       23:  229-block  2
        7:  229-block  3
       14:  229-block  4
      675:  229-block  5
        1:  229-block  6
    %%%%%:  229-block  7
    %%%%%:  229-block  8
    %%%%%:  229-block  9
      579:  229-block 10
       18:  229-block 11
       59:  229-block 12
       16:  229-block 13
        -:  230:#else
        -:  231:	return std::size_t(-1) / sizeof(_Tp);
        -:  232:#endif
        -:  233:      }
        -:  234:    };
        -:  235:
        -:  236:_GLIBCXX_END_NAMESPACE_VERSION
        -:  237:} // namespace
        -:  238:
        -:  239:#endif
