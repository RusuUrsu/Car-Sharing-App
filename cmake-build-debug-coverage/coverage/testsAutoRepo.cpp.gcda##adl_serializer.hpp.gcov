        -:    0:Source:C:/Users/rares/CLionProjects/OOP/Json-test/include/nlohmann/adl_serializer.hpp
        -:    0:Graph:C:\Users\rares\CLionProjects\OOP\Json-test\cmake-build-debug-coverage\CMakeFiles\Json_test.dir\Repositories\AutoRepo\TestsAutoRepo\testsAutoRepo.cpp.gcno
        -:    0:Data:C:\Users\rares\CLionProjects\OOP\Json-test\cmake-build-debug-coverage\CMakeFiles\Json_test.dir\Repositories\AutoRepo\TestsAutoRepo\testsAutoRepo.cpp.gcda
        -:    0:Runs:1
        -:    1://     __ _____ _____ _____
        -:    2://  __|  |   __|     |   | |  JSON for Modern C++
        -:    3:// |  |  |__   |  |  | | | |  version 3.11.3
        -:    4:// |_____|_____|_____|_|___|  https://github.com/nlohmann/json
        -:    5://
        -:    6:// SPDX-FileCopyrightText: 2013-2023 Niels Lohmann <https://nlohmann.me>
        -:    7:// SPDX-License-Identifier: MIT
        -:    8:
        -:    9:#pragma once
        -:   10:
        -:   11:#include <utility>
        -:   12:
        -:   13:#include <nlohmann/detail/abi_macros.hpp>
        -:   14:#include <nlohmann/detail/conversions/from_json.hpp>
        -:   15:#include <nlohmann/detail/conversions/to_json.hpp>
        -:   16:#include <nlohmann/detail/meta/identity_tag.hpp>
        -:   17:
        -:   18:NLOHMANN_JSON_NAMESPACE_BEGIN
        -:   19:
        -:   20:/// @sa https://json.nlohmann.me/api/adl_serializer/
        -:   21:template<typename ValueType, typename>
        -:   22:struct adl_serializer
        -:   23:{
        -:   24:    /// @brief convert a JSON value to any value type
        -:   25:    /// @sa https://json.nlohmann.me/api/adl_serializer/from_json/
        -:   26:    template<typename BasicJsonType, typename TargetType = ValueType>
        -:   27:    static auto from_json(BasicJsonType && j, TargetType& val) noexcept(
        -:   28:        noexcept(::nlohmann::from_json(std::forward<BasicJsonType>(j), val)))
        -:   29:    -> decltype(::nlohmann::from_json(std::forward<BasicJsonType>(j), val), void())
        -:   30:    {
        -:   31:        ::nlohmann::from_json(std::forward<BasicJsonType>(j), val);
        -:   32:    }
        -:   33:
        -:   34:    /// @brief convert a JSON value to any value type
        -:   35:    /// @sa https://json.nlohmann.me/api/adl_serializer/from_json/
        -:   36:    template<typename BasicJsonType, typename TargetType = ValueType>
        -:   37:    static auto from_json(BasicJsonType && j) noexcept(
        -:   38:    noexcept(::nlohmann::from_json(std::forward<BasicJsonType>(j), detail::identity_tag<TargetType> {})))
        -:   39:    -> decltype(::nlohmann::from_json(std::forward<BasicJsonType>(j), detail::identity_tag<TargetType> {}))
        -:   40:    {
        -:   41:        return ::nlohmann::from_json(std::forward<BasicJsonType>(j), detail::identity_tag<TargetType> {});
        -:   42:    }
        -:   43:
        -:   44:    /// @brief convert any value type to a JSON value
        -:   45:    /// @sa https://json.nlohmann.me/api/adl_serializer/to_json/
        -:   46:    template<typename BasicJsonType, typename TargetType = ValueType>
       1*:   47:    static auto to_json(BasicJsonType& j, TargetType && val) noexcept(
        -:   48:        noexcept(::nlohmann::to_json(j, std::forward<TargetType>(val))))
        -:   49:    -> decltype(::nlohmann::to_json(j, std::forward<TargetType>(val)), void())
        -:   50:    {
       1*:   51:        ::nlohmann::to_json(j, std::forward<TargetType>(val));
       1*:   52:    }
------------------
_ZN8nlohmann16json_abi_v3_11_314adl_serializerIivE7to_jsonINS0_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbxydSaS1_S6_IhSaIhEEvEERiEEDTcmclL_ZNS0_7to_jsonEEfp_cl7forwardIT0_Efp0_EEcvv_EERT_OSH_:
function _ZN8nlohmann16json_abi_v3_11_314adl_serializerIivE7to_jsonINS0_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbxydSaS1_S6_IhSaIhEEvEERiEEDTcmclL_ZNS0_7to_jsonEEfp_cl7forwardIT0_Efp0_EEcvv_EERT_OSH_ called 1 returned 100% blocks executed 100%
        1:   47:    static auto to_json(BasicJsonType& j, TargetType && val) noexcept(
        -:   48:        noexcept(::nlohmann::to_json(j, std::forward<TargetType>(val))))
        -:   49:    -> decltype(::nlohmann::to_json(j, std::forward<TargetType>(val)), void())
        -:   50:    {
        1:   51:        ::nlohmann::to_json(j, std::forward<TargetType>(val));
        1:   51-block  0
call    0 returned 1
call    1 returned 1
        1:   52:    }
------------------
_ZN8nlohmann16json_abi_v3_11_314adl_serializerIPKcvE7to_jsonINS0_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbxydSaS1_S8_IhSaIhEEvEERS3_EEDTcmclL_ZNS0_7to_jsonEEfp_cl7forwardIT0_Efp0_EEcvv_EERT_OSJ_:
function _ZN8nlohmann16json_abi_v3_11_314adl_serializerIPKcvE7to_jsonINS0_10basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbxydSaS1_S8_IhSaIhEEvEERS3_EEDTcmclL_ZNS0_7to_jsonEEfp_cl7forwardIT0_Efp0_EEcvv_EERT_OSJ_ called 0 returned 0% blocks executed 0%
    #####:   47:    static auto to_json(BasicJsonType& j, TargetType && val) noexcept(
        -:   48:        noexcept(::nlohmann::to_json(j, std::forward<TargetType>(val))))
        -:   49:    -> decltype(::nlohmann::to_json(j, std::forward<TargetType>(val)), void())
        -:   50:    {
    #####:   51:        ::nlohmann::to_json(j, std::forward<TargetType>(val));
    %%%%%:   51-block  0
call    0 never executed
call    1 never executed
    #####:   52:    }
------------------
        -:   53:};
        -:   54:
        -:   55:NLOHMANN_JSON_NAMESPACE_END
